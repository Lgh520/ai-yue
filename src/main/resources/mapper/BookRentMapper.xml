<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project.aiyue.dao.BookRentMapper" >
  <resultMap id="BaseResultMap" type="com.project.aiyue.dao.po.BookRent" >
    <id column="RENT_ID" property="rentId" jdbcType="BIGINT" />
    <result column="USER_ID" property="userId" jdbcType="VARCHAR" />
    <result column="BOOK_ID" property="bookId" jdbcType="BIGINT" />
    <result column="IS_BACK" property="isBack" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    RENT_ID, USER_ID, BOOK_ID, IS_BACK, CREATE_TIME, UPDATE_TIME
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from book_rent
    where RENT_ID = #{rentId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from book_rent
    where RENT_ID = #{rentId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.project.aiyue.dao.po.BookRent" >
    insert into book_rent (RENT_ID, USER_ID, BOOK_ID, 
      IS_BACK, CREATE_TIME, UPDATE_TIME
      )
    values (#{rentId,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, #{bookId,jdbcType=BIGINT}, 
      #{isBack,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.project.aiyue.dao.po.BookRent" >
    insert into book_rent
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="rentId != null" >
        RENT_ID,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="bookId != null" >
        BOOK_ID,
      </if>
      <if test="isBack != null" >
        IS_BACK,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="rentId != null" >
        #{rentId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="bookId != null" >
        #{bookId,jdbcType=BIGINT},
      </if>
      <if test="isBack != null" >
        #{isBack,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.project.aiyue.dao.po.BookRent" >
    update book_rent
    <set >
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="bookId != null" >
        BOOK_ID = #{bookId,jdbcType=BIGINT},
      </if>
      <if test="isBack != null" >
        IS_BACK = #{isBack,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where RENT_ID = #{rentId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.project.aiyue.dao.po.BookRent" >
    update book_rent
    set USER_ID = #{userId,jdbcType=VARCHAR},
      BOOK_ID = #{bookId,jdbcType=BIGINT},
      IS_BACK = #{isBack,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where RENT_ID = #{rentId,jdbcType=BIGINT}
  </update>
</mapper>